Transform: AWS::Serverless-2016-10-31
Description: >-
  Provision queues, policies and a lambda to support automatic suppression of Security Hub findings.
  See https://aws.amazon.com/blogs/security/how-to-create-auto-suppression-rules-in-aws-security-hub/ for
  more details.
Parameters:
  AccessToQueueUserArnList:
    Type: List<String>
    Description: A list of users' ARNs that can access the findings queue
Resources:
  SecurityHubBatchUpdateSuppressionManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          Effect: Allow
          Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          Sid: CloudWatchLogs1
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/SecurityHubFindingsSuppressionLambdaFct:*"
          Sid: CloudWatchLogs2
        - Action: securityhub:BatchUpdateFindings
          Effect: Allow
          Resource: "*"
          Sid: SecurityHubBatchUpdateFindings
        Version: '2012-10-17'
      Description: Suppression policy for Security Hub implementing batch update findings
      Path: "/"
  SecurityHubBatchUpdateSuppressionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Description: Suppression role for Security Hub batch update findings
      ManagedPolicyArns:
      - Ref: SecurityHubBatchUpdateSuppressionManagedPolicy
      Path: "/"
  SecurityHubBatchUpdateSuppressionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: kms:Decrypt
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - SqsEncryptionKey
            - Arn
        - Action:
          - sqs:ReceiveMessage
          - sqs:ChangeMessageVisibility
          - sqs:GetQueueUrl
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - SecurityHubFindingsQueue
            - Arn
        Version: '2012-10-17'
      PolicyName: SecurityHubBatchUpdateSuppressionRoleDefaultPolicy
      Roles:
      - Ref: SecurityHubBatchUpdateSuppressionRole
  SecurityHubFindingsQueueAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            AWS: !Ref AccessToQueueUserArnList
        Version: '2012-10-17'
      Description: Access to encrypted queue for SSO roles
      Path: "/"
  SecurityHubFindingsQueueAccessRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: kms:Decrypt
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - SqsEncryptionKey
            - Arn
        Version: '2012-10-17'
      PolicyName: SecurityHubFindingsQueueAccessRoleDefaultPolicy
      Roles:
      - Ref: SecurityHubFindingsQueueAccessRole
  SqsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
        - Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:GenerateDataKey
          - kms:TagResource
          - kms:UntagResource
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:'
                - Ref: AWS::Partition
                - ":iam::"
                - Ref: AWS::AccountId
                - ":root"
          Resource: "*"
        - Action: kms:Decrypt
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - SecurityHubBatchUpdateSuppressionRole
              - Arn
          Resource: "*"
        - Action:
          - kms:Decrypt
          - kms:Encrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Resource: "*"
        Version: '2012-10-17'
      EnableKeyRotation: true
      PendingWindowInDays: 30
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  SqsEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/SQSEncryptionKey
      TargetKeyId:
        Fn::GetAtt:
        - SqsEncryptionKey
        - Arn
  SecurityhubFindingsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId:
        Fn::GetAtt:
        - SqsEncryptionKey
        - Arn
      MessageRetentionPeriod: 172800
      VisibilityTimeout: 130
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  SecurityHubFindingsDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:*
          Condition:
            Bool:
              aws:secureTransport: 'false'
          Effect: Deny
          Principal: "*"
          Resource:
            Fn::GetAtt:
            - SecurityhubFindingsDeadLetterQueue
            - Arn
          Sid: Enforce TLS for all principals
        Version: '2012-10-17'
      Queues:
      - Ref: SecurityhubFindingsDeadLetterQueue
  SecurityHubFindingsQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId:
        Fn::GetAtt:
        - SqsEncryptionKey
        - Arn
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - SecurityhubFindingsDeadLetterQueue
          - Arn
        maxReceiveCount: 1
      VisibilityTimeout: 130
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  SecurityHubFindingsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:*
          Condition:
            Bool:
              aws:secureTransport: 'false'
          Effect: Deny
          Principal: "*"
          Resource:
            Fn::GetAtt:
            - SecurityHubFindingsQueue
            - Arn
          Sid: Enforce TLS for all principals
        - Action:
          - sqs:SendMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Resource:
            Fn::GetAtt:
            - SecurityHubFindingsQueue
            - Arn
        Version: '2012-10-17'
      Queues:
      - Ref: SecurityHubFindingsQueue

  AWSLambdaPowertoolsApplication:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-west-1:057560766410:applications/aws-lambda-powertools-python-layer
        SemanticVersion: 2.5.0
    Metadata:
      aws:cdk:path: sechub-finding-suppression/AWSLambdaPowertoolsApplication
  SecurityHubFindingsSuppressionLambdaFct:
    Type: AWS::Lambda::Function
    DependsOn: SecurityHubBatchUpdateSuppressionRole
    Properties:
      Code:
        ZipFile: |
          import json, boto3
          import botocore.exceptions as boto3exceptions

          from aws_lambda_powertools.utilities.batch import BatchProcessor, EventType
          from aws_lambda_powertools import Logger
          from aws_lambda_powertools.utilities.typing import LambdaContext

          logger =  Logger()

          sh_client = boto3.client("securityhub")

          """
          Used by the lambda to tracks all of the Security Hub finding ids that will be suppressed.
          Each Lambda invocation will create a separate instance of this class.
          """
          class RecordsHandler:
              def __init__(self):
                  self.finding_identifiers = []

              def record_handler(self, record):
                  payload = json.loads(record["body"])
                  logger.info(f"payload {payload}")
                  finding_identifier = {
                      "Id": payload["detail"]["findings"][0]["Id"],
                      "ProductArn": payload["detail"]["findings"][0]["ProductArn"],
                  }
                  self.finding_identifiers.append(finding_identifier)

              def get_finding_identifiers(self):
                  return self.finding_identifiers

          """
          Uses the Lambda Powertools BatchProcessor in order to build the findings id list.
          Lambda powertools is used to prevent successfully processed messages being returned to SQS
          https://awslabs.github.io/aws-lambda-powertools-python/latest/utilities/batch/
          """
          @logger.inject_lambda_context(log_event=True)
          def handler(event, context):
              records = event["Records"]
              logger.info(f"records {records}")

              processor = BatchProcessor(event_type=EventType.SQS)

              rh = RecordsHandler()
              with processor(records, rh.record_handler) as proc:
                  proc.process()

              finding_identifiers = rh.get_finding_identifiers()
              logger.info(f"finding_identifiers {finding_identifiers}")

              try:
                  response = sh_client.batch_update_findings(
                      FindingIdentifiers=finding_identifiers,
                      Workflow={"Status": "SUPPRESSED"},
                  )
                  for processed_findings in response["ProcessedFindings"]:
                      logger.info(
                          f"processed and suppressed id {processed_findings['Id']} productarn {processed_findings['ProductArn']}"
                      )

                  for unprocessed_findings in response["UnprocessedFindings"]:
                      logger.error(
                          f"unprocessed finding id {unprocessed_findings['FindingIdentifier']['Id']} productarn {unprocessed_findings['FindingIdentifier']['ProductArn']} error code {unprocessed_findings['ErrorCode']} error message {unprocessed_findings['ErrorMessage']}"
                      )

              except boto3exceptions.ClientError as error:
                  logger.exception("client error")
                  raise ConnectionError(f"Client error invoking batch update findings {error}")
              except boto3exceptions.ParamValidationError as error:
                  logger.exception("invalid parameters")
                  raise ValueError(f"The parameters you provided are incorrect: {error}")

              return {"statusCode": 200}
      Role: !GetAtt SecurityHubBatchUpdateSuppressionRole.Arn
      FunctionName: SecurityHubFindingsSuppressionLambdaFct
      Description: Suppression lambda for Security Hub implements batch update findings
      Handler: index.handler
      Layers:
      - Fn::GetAtt:
        - AWSLambdaPowertoolsApplication
        - Outputs.LayerVersionArn
      Runtime: python3.8
      Timeout: 120
  BatchupdateEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    DependsOn: SecurityHubFindingsSuppressionLambdaFct
    Properties:
      FunctionName: !Ref SecurityHubFindingsSuppressionLambdaFct
      Qualifier: "$LATEST"
      MaximumRetryAttempts: 2
  BatchUpdateLambdaFctEventSourceEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: SecurityHubFindingsSuppressionLambdaFct
    Properties:
      FunctionName: !Ref SecurityHubFindingsSuppressionLambdaFct
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SecurityHubFindingsQueue.Arn
      MaximumBatchingWindowInSeconds: 10

  # Below this point, rules are defined to send findings to the SecurityHubFindingsQueue above
  # The findings on the queue will be processed by a lambda that will suppress them in SecurityHub

  # This rule suppresses findings for the given controls (GeneratorId) in all the accounts
  SuppressFindingsInAllAccountsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: SecHubSuppress findings (identified by generatorId) for all accounts
      EventPattern:
        detail:
          findings:
            GeneratorId:
              - 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0/rule/4.3'
              - 'aws-foundational-security-best-practices/v/1.0.0/EC2.2'
              - 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0/rule/1.14'
              - 'aws-foundational-security-best-practices/v/1.0.0/IAM.6'
              - 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0/rule/2.7'
            Workflow:
              Status:
              - NEW
        detail-type:
        - Security Hub Findings - Imported
        source:
        - aws.securityhub
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - SecurityHubFindingsQueue
          - Arn
        Id: Target0

  # This rule suppresses findings with the given generator IDs only for the bootstrap and essentials buckets
  SuppressFindingsForPublicBucketsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: SecHubSuppress findings (identified by generatorId) for the bootstrap and essentials buckets in all accounts
      EventPattern:
        detail:
          findings:
            Resources:
              Id:
                - prefix: 'arn:aws:s3:::bootstrap-awss3cloudformationbucket-'
                - prefix: 'arn:aws:s3:::essentials-awss3lambdaartifactsbucket-'
            GeneratorId:
              - 'cis-aws-foundations-benchmark/v/1.4.0/2.1.1'
            Workflow:
              Status:
              - NEW
        detail-type:
        - Security Hub Findings - Imported
        source:
        - aws.securityhub
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - SecurityHubFindingsQueue
          - Arn
        Id: Target0

  # This rule suppresses findings with the given generator IDs only for the IAM accounts specified
  SuppressFindingsForIAMsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: SecHubSuppress findings (identified by generatorId) for given IAM accounts in all AWS accounts
      EventPattern:
        detail:
          findings:
            Resources:
              Id:
                # synapsedw IT-2308, do not exempt human users
                - 'arn:aws:iam::383874245509:user/prod-warehouse'
                # synapseprod IT-2396, do not exempt human users
                - 'arn:aws:iam::325565585839:user/ran-uploader'
                # scipool IT-2315
                - prefix: 'arn:aws:iam::237179673806:user/synapse-login-scipoolprod-ServiceUser-'
            GeneratorId:
              - 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0/rule/1.4'
            Workflow:
              Status:
              - NEW
        detail-type:
        - Security Hub Findings - Imported
        source:
        - aws.securityhub
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - SecurityHubFindingsQueue
          - Arn
        Id: Target0

  # This rule suppresses findings with the given generator IDs only for the bootstrap and essentials buckets
  SuppressFindingsForCMKRotationRule:
    Type: AWS::Events::Rule
    Properties:
      Description: SecHubSuppress findings (identified by generatorId) for the bootstrap and essentials buckets in all accounts
      EventPattern:
        detail:
          findings:
            Resources:
              Id:
                # Keys generated for the CDK
                - 'arn:aws:kms:us-east-1:140124849929:key/ad4078e5-913c-4555-810f-559f885b8e83'
                - 'arn:aws:kms:us-east-1:659375444835:key/9382eb5d-0bc3-4a9a-9f05-47a8ef859dd5'
                - 'arn:aws:kms:us-east-1:153370007719:key/13e2031a-782e-4a70-902f-305f09082ced'
                - 'arn:aws:kms:us-east-1:035458030717:key/2f61e7ce-b0f5-4ea6-b142-58a1e279942a'
                - 'arn:aws:kms:us-east-1:055273631518:key/18f38818-5eb6-4a44-a812-be978c68fb19'
                - 'arn:aws:kms:us-east-1:087547153226:key/aca8144e-aa5c-4715-9cdc-d71fb97c4c58'
                - 'arn:aws:kms:us-east-1:216152803258:key/618c7e04-5762-4534-b508-433f7cd6e5ba'
                - 'arn:aws:kms:us-east-1:231505186444:key/122ea992-d85f-4df0-9cde-55185caebaf8'
                - 'arn:aws:kms:us-east-1:237179673806:key/5e00ad6f-a6e6-45a0-8c12-9174ad6a9686'
                - 'arn:aws:kms:us-east-1:254940560790:key/5d2f47e4-4ee9-4c7a-9be6-e97c9018fb35'
                - 'arn:aws:kms:us-east-1:325565585839:key/69f9569e-3f7c-44bc-82b4-ccc9af346ef8'
                - 'arn:aws:kms:us-east-1:383874245509:key/b841cd94-825d-4131-b609-7076fcf6fce1'
                - 'arn:aws:kms:us-east-1:386990716034:key/8ba3a8af-9373-4ed4-8de2-ff3a5156a46e'
                - 'arn:aws:kms:us-east-1:420786776710:key/2b8157d8-f9c4-48a9-98ab-92081eb9f66e'
                - 'arn:aws:kms:us-east-1:449435941126:key/c9f43144-b16c-42bb-9b2a-9febcf496faf'
                - 'arn:aws:kms:us-east-1:465877038949:key/cb74b5a0-c8d6-4d39-a066-ec1ba9e20ca1'
                - 'arn:aws:kms:us-east-1:526515999252:key/0a9896ea-c042-4405-9d09-1d35b3ed09a2'
                - 'arn:aws:kms:us-east-1:531805629419:key/a603ec84-4e55-4267-a937-41fedb51228d'
                - 'arn:aws:kms:us-east-1:563295687221:key/27130b36-1ca5-4c0e-be3b-7431ee5706d2'
                - 'arn:aws:kms:us-east-1:607346494281:key/b0d1302a-1099-4d31-9b03-dd89393f6944'
                - 'arn:aws:kms:us-east-1:611413694531:key/b30543ad-67ae-4f43-ac7f-be224f3308e3'
                - 'arn:aws:kms:us-east-1:631692904429:key/c81fe29a-d84f-45c7-bad9-d2683b37a06d'
                - 'arn:aws:kms:us-east-1:634761300905:key/123dc4e6-00c3-4009-9adc-09db68c0365a'
                - 'arn:aws:kms:us-east-1:638976327662:key/2eb0d3c7-9c4e-478e-a31b-ac862e72abc4'
                - 'arn:aws:kms:us-east-1:649232250620:key/eeca9449-1771-49d5-97ff-f98c5169d440'
                - 'arn:aws:kms:us-east-1:659375444835:key/9382eb5d-0bc3-4a9a-9f05-47a8ef859dd5'
                - 'arn:aws:kms:us-east-1:681175625864:key/48724477-ab14-46c5-9405-c20fb069ac91'
                - 'arn:aws:kms:us-east-1:728882028485:key/e5231cc1-dbae-4e26-8937-4d3cc4afee13'
                - 'arn:aws:kms:us-east-1:739768332450:key/134d9de2-b764-45d3-955b-2a5b9d55370a'
                - 'arn:aws:kms:us-east-1:743644221192:key/4d7c758c-a5cd-4081-9c86-94a5805c88f0'
                - 'arn:aws:kms:us-east-1:745159704268:key/ef230881-50d2-4842-867e-95ece6d3c3f9'
                - 'arn:aws:kms:us-east-1:766808016710:key/5f18d07e-87ca-4d22-89f7-de472c305b3f'
                - 'arn:aws:kms:us-east-1:797640923903:key/29b78819-8556-41a2-b52b-038c84c390b4'
                - 'arn:aws:kms:us-east-1:841415736403:key/5fcdb95d-dc9a-497a-8199-0d776cf6104d'
                - 'arn:aws:kms:us-east-1:867686887310:key/b4d49c70-b303-4447-a703-2cb4fffa1017'
                - 'arn:aws:kms:us-east-1:878654265857:key/9b1ad791-abeb-4734-afb8-bf64ecb0bd6e'
                - 'arn:aws:kms:us-east-1:888810830951:key/79ca1872-4859-4432-b79f-7c92ea7c1fa2'
                - 'arn:aws:kms:us-east-1:914833433684:key/274eb1ba-08d8-461b-8a1a-f3e58b7761fb'
                - 'arn:aws:kms:us-east-1:975466401039:key/f3161ab0-a42b-4bbc-be32-b5a760a6e9d1'
            GeneratorId:
              - 'cis-aws-foundations-benchmark/v/1.4.0/3.8'
              - 'arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0/rule/2.8'
            Workflow:
              Status:
              - NEW
        detail-type:
        - Security Hub Findings - Imported
        source:
        - aws.securityhub
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - SecurityHubFindingsQueue
          - Arn
        Id: Target0
